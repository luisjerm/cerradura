<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\SD_Example.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\SD_Example.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Sun Feb 19 22:46:58 2017
<BR><P>
<H3>Maximum Stack Usage =        528 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; screenStateMachine &rArr; screenData &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[195]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[f]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">NMI_Handler</a><BR>
 <LI><a href="#[10]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">HardFault_Handler</a><BR>
 <LI><a href="#[11]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">MemManage_Handler</a><BR>
 <LI><a href="#[12]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">BusFault_Handler</a><BR>
 <LI><a href="#[13]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">UsageFault_Handler</a><BR>
 <LI><a href="#[14]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">SVC_Handler</a><BR>
 <LI><a href="#[15]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">DebugMon_Handler</a><BR>
 <LI><a href="#[16]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">PendSV_Handler</a><BR>
 <LI><a href="#[2f]">BOD_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f]">BOD_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2e]">ADC_IRQHandler</a> from adc.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2f]">BOD_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[12]">BusFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[50]">BusSpeed</a> from spi_lpc17xx.o(.text) referenced from spi_lpc17xx.o(.constdata)
 <LI><a href="#[3a]">CANActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[31]">CAN_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[52]">CheckMedia</a> from spi_lpc17xx.o(.text) referenced from spi_lpc17xx.o(.constdata)
 <LI><a href="#[32]">DMA_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[15]">DebugMon_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2a]">EINT0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2b]">EINT1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2c]">EINT2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2d]">EINT3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[34]">ENET_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[10]">HardFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[22]">I2C0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[23]">I2C1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[24]">I2C2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[33]">I2S_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[4b]">Init</a> from spi_lpc17xx.o(.text) referenced from spi_lpc17xx.o(.constdata)
 <LI><a href="#[36]">MCPWM_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[11]">MemManage_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[f]">NMI_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[28]">PLL0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[38]">PLL1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[21]">PWM1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[16]">PendSV_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[37]">QEI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[35]">RIT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[29]">RTC_IRQHandler</a> from rtc.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[4f]">RecBuf</a> from spi_lpc17xx.o(.text) referenced from spi_lpc17xx.o(.constdata)
 <LI><a href="#[e]">Reset_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[25]">SPI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[26]">SSP0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[27]">SSP1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[14]">SVC_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[4d]">Send</a> from spi_lpc17xx.o(.text) referenced from spi_lpc17xx.o(.constdata)
 <LI><a href="#[4e]">SendBuf</a> from spi_lpc17xx.o(.text) referenced from spi_lpc17xx.o(.constdata)
 <LI><a href="#[51]">SetSS</a> from spi_lpc17xx.o(.text) referenced from spi_lpc17xx.o(.constdata)
 <LI><a href="#[17]">SysTick_Handler</a> from timer.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[3b]">SystemInit</a> from system_lpc17xx.o(.text) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[19]">TIMER0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1a]">TIMER1_IRQHandler</a> from tecladom.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1b]">TIMER2_IRQHandler</a> from alarma.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1c]">TIMER3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1d]">UART0_IRQHandler</a> from uart.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1e]">UART1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1f]">UART2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[20]">UART3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[39]">USBActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[30]">USB_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[4c]">UnInit</a> from spi_lpc17xx.o(.text) referenced from spi_lpc17xx.o(.constdata)
 <LI><a href="#[13]">UsageFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[18]">WDT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[41]">__backspace</a> from backspace.o(.text) referenced from scanf_char_file.o(.text)
 <LI><a href="#[53]">__main</a> from __main.o(!!!main) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[44]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[3e]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[42]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[3d]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[40]">fgetc</a> from fgetc.o(i.fgetc) referenced from scanf_char_file.o(.text)
 <LI><a href="#[3f]">fputc</a> from fputc.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[43]">isspace</a> from isspace.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[4a]">mc0_DevCtrl</a> from file_config.o(.text) referenced from file_config.o(.constdata)
 <LI><a href="#[45]">mc0_Init</a> from file_config.o(.text) referenced from file_config.o(.constdata)
 <LI><a href="#[49]">mc0_RdInfo</a> from file_config.o(.text) referenced from file_config.o(.constdata)
 <LI><a href="#[47]">mc0_RdSect</a> from file_config.o(.text) referenced from file_config.o(.constdata)
 <LI><a href="#[46]">mc0_UnInit</a> from file_config.o(.text) referenced from file_config.o(.constdata)
 <LI><a href="#[48]">mc0_WrSect</a> from file_config.o(.text) referenced from file_config.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[53]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[54]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[56]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[229]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[22a]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[22b]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[22c]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[22d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[57]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[169]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[59]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[5b]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[5d]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[22e]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[6d]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[22f]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[5f]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[230]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[61]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[231]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[232]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[233]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[63]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[234]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[235]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[64]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[236]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[237]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[238]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[239]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[23a]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[23b]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[23c]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[66]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000022))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[23d]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[23e]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[23f]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[240]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[241]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[242]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[72]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[68]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[243]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[244]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[245]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[246]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[247]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[248]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[55]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[249]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[6a]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[6c]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[24a]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[6e]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; screenStateMachine &rArr; screenData &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[24b]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[19d]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[71]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[24c]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[73]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[e]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[24d]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[f]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOD_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>CANActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>RIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USBActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[195]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[a9]"></a>check_failed</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lpc17xx_libcfg_default.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadGPREG
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteGPREG
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CalibConfig
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CalibCounterCmd
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearIntPending
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetIntPending
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetFullAlarmTime
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetFullAlarmTime
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarmTime
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetFullTime
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetFullTime
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_AlarmIntConfig
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CntIncrIntConfig
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Cmd
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ResetClockTickCounter
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DeInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_DMACmd
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_ClearIntPending
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_GetIntStatus
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_GetRawIntStatusReg
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_GetRawIntStatus
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_IntConfig
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_GetStatus
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_ReceiveData
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_SendData
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_SlaveOutputCmd
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_LoopBackCmd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Cmd
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_GetDataSize
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_DeInit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSSPclock
</UL>

<P><STRONG><a name="[75]"></a>GetASCIICode</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, asciilib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetASCIICode
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutChar
</UL>

<P><STRONG><a name="[6f]"></a>main</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = main &rArr; screenStateMachine &rArr; screenData &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenStateMachine
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_RTC
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTimer
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initScreenStateMachine
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_pwm2
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFRC522_init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPanel_Calibrate
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Initializtion
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[7d]"></a>sdInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sd_functions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sdInit &rArr; finit &rArr; init_drv &rArr; fat_init &rArr; write_fsinfo &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenStateMachine
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>sdRegisterCard</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sd_functions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = sdRegisterCard &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenStateMachine
</UL>

<P><STRONG><a name="[24e]"></a>__semihosting$guard</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[24f]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>feof</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, feof.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taz_o_NO_taz
</UL>

<P><STRONG><a name="[250]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[251]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[252]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[253]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 312 bytes, Stack size 0 bytes, system_lpc17xx.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>SystemInit</STRONG> (Thumb, 282 bytes, Stack size 0 bytes, system_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(.text)
</UL>
<P><STRONG><a name="[254]"></a>CLKPWR_SetPCLKDiv</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, lpc17xx_clkpwr.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>CLKPWR_GetPCLKSEL</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetPCLK
</UL>

<P><STRONG><a name="[86]"></a>CLKPWR_GetPCLK</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lpc17xx_clkpwr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetPCLKSEL
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSSPclock
</UL>

<P><STRONG><a name="[aa]"></a>CLKPWR_ConfigPPWR</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DeInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_DeInit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init
</UL>

<P><STRONG><a name="[255]"></a>CLKPWR_Sleep</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(.text), UNUSED)

<P><STRONG><a name="[256]"></a>CLKPWR_DeepSleep</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(.text), UNUSED)

<P><STRONG><a name="[257]"></a>CLKPWR_PowerDown</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(.text), UNUSED)

<P><STRONG><a name="[258]"></a>CLKPWR_DeepPowerDown</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>GPIO_SetDir</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_SetDir
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
</UL>

<P><STRONG><a name="[8a]"></a>GPIO_SetValue</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_SetValue
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
</UL>

<P><STRONG><a name="[8b]"></a>GPIO_ClearValue</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ClearValue
</UL>

<P><STRONG><a name="[8c]"></a>GPIO_ReadValue</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ReadValue
</UL>

<P><STRONG><a name="[92]"></a>GPIO_IntCmd</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_IntCmd
</UL>

<P><STRONG><a name="[94]"></a>GPIO_GetIntStatus</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_GetIntStatus
</UL>

<P><STRONG><a name="[96]"></a>GPIO_ClearInt</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ClearInt
</UL>

<P><STRONG><a name="[8d]"></a>FIO_SetDir</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
</UL>

<P><STRONG><a name="[8e]"></a>FIO_SetValue</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>

<P><STRONG><a name="[8f]"></a>FIO_ClearValue</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>

<P><STRONG><a name="[90]"></a>FIO_ReadValue</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
</UL>

<P><STRONG><a name="[91]"></a>FIO_IntCmd</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IntCmd
</UL>

<P><STRONG><a name="[93]"></a>FIO_GetIntStatus</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetIntStatus
</UL>

<P><STRONG><a name="[95]"></a>FIO_ClearInt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearInt
</UL>

<P><STRONG><a name="[97]"></a>FIO_SetMask</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>

<P><STRONG><a name="[98]"></a>FIO_HalfWordSetDir</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordGetPointer
</UL>

<P><STRONG><a name="[9a]"></a>FIO_HalfWordSetMask</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordGetPointer
</UL>

<P><STRONG><a name="[9b]"></a>FIO_HalfWordSetValue</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordGetPointer
</UL>

<P><STRONG><a name="[9c]"></a>FIO_HalfWordClearValue</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordGetPointer
</UL>

<P><STRONG><a name="[9d]"></a>FIO_HalfWordReadValue</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordGetPointer
</UL>

<P><STRONG><a name="[9e]"></a>FIO_ByteSetDir</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteGetPointer
</UL>

<P><STRONG><a name="[a0]"></a>FIO_ByteSetMask</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteGetPointer
</UL>

<P><STRONG><a name="[a1]"></a>FIO_ByteSetValue</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteGetPointer
</UL>

<P><STRONG><a name="[a2]"></a>FIO_ByteClearValue</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteGetPointer
</UL>

<P><STRONG><a name="[a3]"></a>FIO_ByteReadValue</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteGetPointer
</UL>

<P><STRONG><a name="[259]"></a>PINSEL_ConfigTraceFunc</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lpc17xx_pinsel.o(.text), UNUSED)

<P><STRONG><a name="[25a]"></a>PINSEL_SetI2C0Pins</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc17xx_pinsel.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>PINSEL_ConfigPin</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lpc17xx_pinsel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PINSEL_ConfigPin &rArr; set_ResistorMode
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_OpenDrainMode
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ResistorMode
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PinFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
</UL>

<P><STRONG><a name="[a8]"></a>RTC_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lpc17xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[ab]"></a>RTC_DeInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lpc17xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[ac]"></a>RTC_ResetClockTickCounter</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lpc17xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[ad]"></a>RTC_Cmd</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lpc17xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[ae]"></a>RTC_CntIncrIntConfig</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, lpc17xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[af]"></a>RTC_AlarmIntConfig</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, lpc17xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[b0]"></a>RTC_SetTime</STRONG> (Thumb, 376 bytes, Stack size 16 bytes, lpc17xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[b1]"></a>RTC_GetTime</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, lpc17xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenMainUpdate
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenTarjeta
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenMain
</UL>

<P><STRONG><a name="[b2]"></a>RTC_SetFullTime</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lpc17xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[b3]"></a>RTC_GetFullTime</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lpc17xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[b4]"></a>RTC_SetAlarmTime</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, lpc17xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[25b]"></a>RTC_GetAlarmTime</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, lpc17xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>RTC_SetFullAlarmTime</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lpc17xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[b6]"></a>RTC_GetFullAlarmTime</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lpc17xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[b7]"></a>RTC_GetIntPending</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lpc17xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[b8]"></a>RTC_ClearIntPending</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lpc17xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[b9]"></a>RTC_CalibCounterCmd</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lpc17xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[ba]"></a>RTC_CalibConfig</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lpc17xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[bb]"></a>RTC_WriteGPREG</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lpc17xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[bc]"></a>RTC_ReadGPREG</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lpc17xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[be]"></a>SSP_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lpc17xx_ssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SSP_Init &rArr; setSSPclock &rArr; CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSSPclock
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
</UL>

<P><STRONG><a name="[bf]"></a>SSP_DeInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lpc17xx_ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[c0]"></a>SSP_GetDataSize</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lpc17xx_ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_ReadWrite
</UL>

<P><STRONG><a name="[d6]"></a>SSP_ConfigStructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lpc17xx_ssp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
</UL>

<P><STRONG><a name="[c1]"></a>SSP_Cmd</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lpc17xx_ssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SSP_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
</UL>

<P><STRONG><a name="[c2]"></a>SSP_LoopBackCmd</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lpc17xx_ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[c3]"></a>SSP_SlaveOutputCmd</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lpc17xx_ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[c4]"></a>SSP_SendData</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lpc17xx_ssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SSP_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WR_CMD
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_ReadWrite
</UL>

<P><STRONG><a name="[c5]"></a>SSP_ReceiveData</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lpc17xx_ssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SSP_ReceiveData
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WR_CMD
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_ReadWrite
</UL>

<P><STRONG><a name="[c6]"></a>SSP_ReadWrite</STRONG> (Thumb, 630 bytes, Stack size 56 bytes, lpc17xx_ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_ReceiveData
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_SendData
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_GetDataSize
</UL>

<P><STRONG><a name="[c7]"></a>SSP_GetStatus</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lpc17xx_ssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SSP_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WR_CMD
</UL>

<P><STRONG><a name="[c8]"></a>SSP_IntConfig</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lpc17xx_ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[c9]"></a>SSP_GetRawIntStatus</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lpc17xx_ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[ca]"></a>SSP_GetRawIntStatusReg</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lpc17xx_ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[cb]"></a>SSP_GetIntStatus</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lpc17xx_ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[cc]"></a>SSP_ClearIntPending</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lpc17xx_ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[cd]"></a>SSP_DMACmd</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lpc17xx_ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[77]"></a>LCD_Initializtion</STRONG> (Thumb, 63088 bytes, Stack size 32 bytes, glcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_Initializtion
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ea]"></a>LCD_Clear</STRONG> (Thumb, 2744 bytes, Stack size 40 bytes, glcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenStateMachine
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPanel_Calibrate
</UL>

<P><STRONG><a name="[d0]"></a>LCD_GetPoint</STRONG> (Thumb, 2218 bytes, Stack size 32 bytes, glcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BGR2RGB
</UL>

<P><STRONG><a name="[d3]"></a>LCD_SetPoint</STRONG> (Thumb, 1304 bytes, Stack size 24 bytes, glcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_SetPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_DrawPoint
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutChar
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>

<P><STRONG><a name="[d2]"></a>LCD_DrawLine</STRONG> (Thumb, 250 bytes, Stack size 36 bytes, glcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LCD_DrawLine &rArr; LCD_SetPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boton_atras
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;teclado_matricial
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pantalla_ini
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillRect
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;squareButton
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;square
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawCross
</UL>

<P><STRONG><a name="[d4]"></a>PutChar</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, glcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PutChar &rArr; LCD_SetPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPoint
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetASCIICode
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Text
</UL>

<P><STRONG><a name="[d5]"></a>GUI_Text</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, glcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GUI_Text &rArr; PutChar &rArr; LCD_SetPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pantalla_distancia_2
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pantalla_distancia_1
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pantalla_ventilador
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pantalla_sensores
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pantalla_pss_bad_3
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boton_atras
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pantalla_RFID
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pantalla_tempe
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pantalla_password_wifi
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;teclado_matricial
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pantalla_ini
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pantalla_pss_ok
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pantalla_pss_bad_2
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pantalla_pss_bad_1
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pantalla_password
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pantalla_alarma
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenData
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;squareButton
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenStateMachine
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPanel_Calibrate
</UL>

<P><STRONG><a name="[78]"></a>TP_Init</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, touchpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TP_Init &rArr; SSP_Init &rArr; setSSPclock &rArr; CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Cmd
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_ConfigStructInit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenStateMachine
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[da]"></a>Read_X</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, touchpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Read_X &rArr; RD_AD &rArr; WR_CMD &rArr; SSP_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RD_AD
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WR_CMD
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_GetAdXY
</UL>

<P><STRONG><a name="[db]"></a>Read_Y</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, touchpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Read_Y &rArr; RD_AD &rArr; WR_CMD &rArr; SSP_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RD_AD
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WR_CMD
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_GetAdXY
</UL>

<P><STRONG><a name="[dc]"></a>TP_GetAdXY</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, touchpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TP_GetAdXY &rArr; Read_Y &rArr; RD_AD &rArr; WR_CMD &rArr; SSP_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Y
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_X
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Ads7846
</UL>

<P><STRONG><a name="[dd]"></a>TP_DrawPoint</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, touchpanel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPoint
</UL>

<P><STRONG><a name="[de]"></a>DrawCross</STRONG> (Thumb, 356 bytes, Stack size 24 bytes, touchpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = DrawCross &rArr; LCD_DrawLine &rArr; LCD_SetPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPanel_Calibrate
</UL>

<P><STRONG><a name="[df]"></a>Read_Ads7846</STRONG> (Thumb, 520 bytes, Stack size 112 bytes, touchpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Read_Ads7846 &rArr; TP_GetAdXY &rArr; Read_Y &rArr; RD_AD &rArr; WR_CMD &rArr; SSP_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_GetAdXY
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zonePressed
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPanel_Calibrate
</UL>

<P><STRONG><a name="[e1]"></a>setCalibrationMatrix</STRONG> (Thumb, 356 bytes, Stack size 32 bytes, touchpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = setCalibrationMatrix &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPanel_Calibrate
</UL>

<P><STRONG><a name="[e4]"></a>getDisplayPoint</STRONG> (Thumb, 238 bytes, Stack size 80 bytes, touchpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = getDisplayPoint &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zonePressed
</UL>

<P><STRONG><a name="[79]"></a>TouchPanel_Calibrate</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, touchpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = TouchPanel_Calibrate &rArr; Read_Ads7846 &rArr; TP_GetAdXY &rArr; Read_Y &rArr; RD_AD &rArr; WR_CMD &rArr; SSP_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCalibrationMatrix
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Ads7846
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawCross
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUS
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Text
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[206]"></a>fs_config</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_cfg_drv
</UL>

<P><STRONG><a name="[25c]"></a>efs_rename</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text), UNUSED)

<P><STRONG><a name="[1b6]"></a>efs_create</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[1b7]"></a>efs_delete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[25d]"></a>efs_free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text), UNUSED)

<P><STRONG><a name="[25e]"></a>efs_format</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text), UNUSED)

<P><STRONG><a name="[25f]"></a>efs_ffind</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text), UNUSED)

<P><STRONG><a name="[1ab]"></a>efs_wclose</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
</UL>

<P><STRONG><a name="[1b9]"></a>efs_read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
</UL>

<P><STRONG><a name="[1bd]"></a>efs_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
</UL>

<P><STRONG><a name="[1ac]"></a>efs_ensure</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_ensure
</UL>

<P><STRONG><a name="[1bb]"></a>efs_seek</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
</UL>

<P><STRONG><a name="[1ad]"></a>efs_fsize</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
</UL>

<P><STRONG><a name="[1b5]"></a>efs_find</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[260]"></a>efs_analyse</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text), UNUSED)

<P><STRONG><a name="[261]"></a>efs_check</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text), UNUSED)

<P><STRONG><a name="[262]"></a>efs_defrag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text), UNUSED)

<P><STRONG><a name="[20a]"></a>fat_jour_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv
</UL>

<P><STRONG><a name="[263]"></a>fat_jour_prep</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text), UNUSED)

<P><STRONG><a name="[264]"></a>fsj_set_space</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>fsj_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>

<P><STRONG><a name="[265]"></a>fsj_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text), UNUSED)

<P><STRONG><a name="[207]"></a>elink_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_cfg_drv
</UL>

<P><STRONG><a name="[20b]"></a>elink_init_path</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_elink_path
</UL>

<P><STRONG><a name="[1f6]"></a>elink_flush</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
</UL>

<P><STRONG><a name="[1db]"></a>elink_alloc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_entry
</UL>

<P><STRONG><a name="[1f2]"></a>elink_cmd</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
</UL>

<P><STRONG><a name="[1c0]"></a>elink_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_entries
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_entry
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
</UL>

<P><STRONG><a name="[1df]"></a>elink_prop</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_entry
</UL>

<P><STRONG><a name="[1de]"></a>elink_insert</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_entry
</UL>

<P><STRONG><a name="[1e7]"></a>elink_delete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_entries
</UL>

<P><STRONG><a name="[202]"></a>elink_scan</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_fn_elink
</UL>

<P><STRONG><a name="[4b]"></a>Init</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, spi_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> spi_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[4d]"></a>Send</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, spi_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> spi_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>BusSpeed</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, spi_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> spi_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[1a4]"></a>_ttywrch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[f1]"></a>_sys_open</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[f4]"></a>_sys_close</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _sys_close &rArr; __sys_close &rArr; fat_wclose &rArr; fat_seek &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[f6]"></a>_sys_write</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _sys_write &rArr; __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[f8]"></a>_sys_read</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[186]"></a>_sys_istty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[fa]"></a>_sys_seek</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _sys_seek &rArr; __sys_seek &rArr; fat_seek &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[fc]"></a>_sys_ensure</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_ensure
</UL>

<P><STRONG><a name="[fe]"></a>_sys_flen</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_flen &rArr; __sys_flen
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[266]"></a>_sys_tmpnam</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[267]"></a>_sys_command_string</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[100]"></a>square</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, menu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>

<P><STRONG><a name="[101]"></a>squareButton</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = squareButton &rArr; GUI_Text &rArr; PutChar &rArr; LCD_SetPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Text
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_Add_RFID
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenErrorNoSD
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenDataError
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenData
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenRegistered
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenErrorRegister
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenMainUpdate
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenTarjeta
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenMain
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenStateMachine
</UL>

<P><STRONG><a name="[103]"></a>fillRect</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, menu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>

<P><STRONG><a name="[104]"></a>screenMain</STRONG> (Thumb, 164 bytes, Stack size 72 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = screenMain &rArr; squareButton &rArr; GUI_Text &rArr; PutChar &rArr; LCD_SetPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;squareButton
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenStateMachine
</UL>

<P><STRONG><a name="[106]"></a>screenTarjeta</STRONG> (Thumb, 164 bytes, Stack size 72 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = screenTarjeta &rArr; squareButton &rArr; GUI_Text &rArr; PutChar &rArr; LCD_SetPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;squareButton
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenStateMachine
</UL>

<P><STRONG><a name="[107]"></a>screenMainUpdate</STRONG> (Thumb, 80 bytes, Stack size 72 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = screenMainUpdate &rArr; squareButton &rArr; GUI_Text &rArr; PutChar &rArr; LCD_SetPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;squareButton
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenStateMachine
</UL>

<P><STRONG><a name="[108]"></a>screenErrorRegister</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = screenErrorRegister &rArr; squareButton &rArr; GUI_Text &rArr; PutChar &rArr; LCD_SetPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;squareButton
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenStateMachine
</UL>

<P><STRONG><a name="[109]"></a>screenRegistered</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = screenRegistered &rArr; squareButton &rArr; GUI_Text &rArr; PutChar &rArr; LCD_SetPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;squareButton
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenStateMachine
</UL>

<P><STRONG><a name="[10a]"></a>screenData</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = screenData &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;squareButton
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Text
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0fscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenStateMachine
</UL>

<P><STRONG><a name="[10c]"></a>taz_o_NO_taz</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = taz_o_NO_taz &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feof
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0fscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenStateMachine
</UL>

<P><STRONG><a name="[10e]"></a>screenDataError</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, menu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;squareButton
</UL>

<P><STRONG><a name="[10f]"></a>screenErrorNoSD</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = screenErrorNoSD &rArr; squareButton &rArr; GUI_Text &rArr; PutChar &rArr; LCD_SetPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;squareButton
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenStateMachine
</UL>

<P><STRONG><a name="[110]"></a>zonePressed</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = zonePressed &rArr; Read_Ads7846 &rArr; TP_GetAdXY &rArr; Read_Y &rArr; RD_AD &rArr; WR_CMD &rArr; SSP_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDisplayPoint
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Ads7846
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tecladoM
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenStateMachine
</UL>

<P><STRONG><a name="[111]"></a>screen_Add_RFID</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = screen_Add_RFID &rArr; squareButton &rArr; GUI_Text &rArr; PutChar &rArr; LCD_SetPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;squareButton
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenStateMachine
</UL>

<P><STRONG><a name="[268]"></a>init_WDT</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, menu.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>initScreenStateMachine</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, menu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>screenStateMachine</STRONG> (Thumb, 1766 bytes, Stack size 32 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = screenStateMachine &rArr; screenData &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_main
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimeOut
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdRegisterCard
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRFID
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pantalla_pss_ok
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pantalla_pss_bad_2
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pantalla_pss_bad_1
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pantalla_password
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pantalla_alarma
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TIMER0
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ADC
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimeOut
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarma
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_Add_RFID
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zonePressed
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenErrorNoSD
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taz_o_NO_taz
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenData
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenRegistered
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenErrorRegister
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenMainUpdate
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenTarjeta
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenMain
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;squareButton
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdInit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Text
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17]"></a>SysTick_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, timer.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>initTimer</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = initTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[114]"></a>setTimeOut</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_main
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenStateMachine
</UL>

<P><STRONG><a name="[11d]"></a>getTimeOut</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenStateMachine
</UL>

<P><STRONG><a name="[11f]"></a>set_time</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_RTC
</UL>

<P><STRONG><a name="[7b]"></a>init_RTC</STRONG> (Thumb, 66 bytes, Stack size 4 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = init_RTC
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29]"></a>RTC_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>config_pwm2</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, ventilador.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[120]"></a>velocidad_ventilador</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, ventilador.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = velocidad_ventilador &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[121]"></a>genera_muestras</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, alarma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarma
</UL>

<P><STRONG><a name="[1b]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, alarma.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[122]"></a>init_DAC</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, alarma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarma
</UL>

<P><STRONG><a name="[123]"></a>init_TIMER2</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, alarma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_TIMER2
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarma
</UL>

<P><STRONG><a name="[118]"></a>alarma</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, alarma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = alarma &rArr; init_TIMER2
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TIMER2
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_DAC
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genera_muestras
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_main
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenStateMachine
</UL>

<P><STRONG><a name="[124]"></a>pantalla_ini</STRONG> (Thumb, 346 bytes, Stack size 8 bytes, pantalla.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Text
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>

<P><STRONG><a name="[125]"></a>teclado_matricial</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, pantalla.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Text
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>

<P><STRONG><a name="[126]"></a>RFID</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, pantalla.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Text
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>

<P><STRONG><a name="[127]"></a>WIFI</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, pantalla.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Text
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>

<P><STRONG><a name="[112]"></a>pantalla_password</STRONG> (Thumb, 404 bytes, Stack size 8 bytes, pantalla.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = pantalla_password &rArr; tecladoM &rArr; zonePressed &rArr; Read_Ads7846 &rArr; TP_GetAdXY &rArr; Read_Y &rArr; RD_AD &rArr; WR_CMD &rArr; SSP_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tecladoM
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Text
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenStateMachine
</UL>

<P><STRONG><a name="[129]"></a>pantalla_password_wifi</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, pantalla.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Text
</UL>

<P><STRONG><a name="[12a]"></a>pantalla_tempe</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, pantalla.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Text
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[12b]"></a>pantalla_RFID</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pantalla.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Text
</UL>

<P><STRONG><a name="[12c]"></a>boton_atras</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, pantalla.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Text
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>

<P><STRONG><a name="[113]"></a>pantalla_pss_ok</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pantalla.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = pantalla_pss_ok &rArr; GUI_Text &rArr; PutChar &rArr; LCD_SetPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Text
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenStateMachine
</UL>

<P><STRONG><a name="[115]"></a>pantalla_pss_bad_1</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pantalla.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = pantalla_pss_bad_1 &rArr; GUI_Text &rArr; PutChar &rArr; LCD_SetPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Text
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenStateMachine
</UL>

<P><STRONG><a name="[116]"></a>pantalla_pss_bad_2</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pantalla.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = pantalla_pss_bad_2 &rArr; GUI_Text &rArr; PutChar &rArr; LCD_SetPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Text
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenStateMachine
</UL>

<P><STRONG><a name="[12d]"></a>pantalla_pss_bad_3</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pantalla.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Text
</UL>

<P><STRONG><a name="[117]"></a>pantalla_alarma</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pantalla.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = pantalla_alarma &rArr; GUI_Text &rArr; PutChar &rArr; LCD_SetPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Text
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenStateMachine
</UL>

<P><STRONG><a name="[12e]"></a>pantalla_sensores</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, pantalla.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = pantalla_sensores &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Text
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[130]"></a>pantalla_ventilador</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, pantalla.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = pantalla_ventilador &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Text
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[131]"></a>pantalla_distancia_1</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, pantalla.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = pantalla_distancia_1 &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Text
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[132]"></a>pantalla_distancia_2</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, pantalla.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = pantalla_distancia_2 &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Text
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[133]"></a>init_TIMER1</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tecladom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_TIMER1
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tecladoM
</UL>

<P><STRONG><a name="[135]"></a>Config</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, tecladom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tecladoM
</UL>

<P><STRONG><a name="[1a]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 506 bytes, Stack size 0 bytes, tecladom.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[128]"></a>tecladoM</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, tecladom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = tecladoM &rArr; zonePressed &rArr; Read_Ads7846 &rArr; TP_GetAdXY &rArr; Read_Y &rArr; RD_AD &rArr; WR_CMD &rArr; SSP_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TIMER1
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zonePressed
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pantalla_password
</UL>

<P><STRONG><a name="[2e]"></a>ADC_IRQHandler</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ADC_IRQHandler &rArr; pantalla_distancia_2 &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pantalla_distancia_2
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pantalla_distancia_1
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pantalla_ventilador
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pantalla_sensores
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocidad_ventilador
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_pwm2
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Text
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[11a]"></a>init_ADC</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_ADC
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenStateMachine
</UL>

<P><STRONG><a name="[11b]"></a>init_TIMER0</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenStateMachine
</UL>

<P><STRONG><a name="[269]"></a>delay2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[1d]"></a>UART0_IRQHandler</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, uart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[13d]"></a>tx_cadena_UART0</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_main
</UL>

<P><STRONG><a name="[13b]"></a>uart0_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uart0_init &rArr; uart0_set_baudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_set_baudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_main
</UL>

<P><STRONG><a name="[119]"></a>uart_main</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = uart_main &rArr; uart0_init &rArr; uart0_set_baudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimeOut
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarma
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_cadena_UART0
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenStateMachine
</UL>

<P><STRONG><a name="[13f]"></a>PCD_WriteRegister</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mfrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PCD_WriteRegister &rArr; m_SPI_write
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_SPI_write
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Select
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_CommunicateWithPICC
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_Reset
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_CalculateCRC
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ClrRegisterBits
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SetRegisterBits
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_AntennaOn
</UL>

<P><STRONG><a name="[141]"></a>PCD_ReadRegister</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mfrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PCD_ReadRegister &rArr; m_SPI_write
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_SPI_write
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Select
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_CommunicateWithPICC
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_Reset
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_CalculateCRC
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ClrRegisterBits
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SetRegisterBits
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_AntennaOn
</UL>

<P><STRONG><a name="[142]"></a>PCD_AntennaOn</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mfrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PCD_AntennaOn &rArr; PCD_ReadRegister &rArr; m_SPI_write
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ReadRegister
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_Init
</UL>

<P><STRONG><a name="[143]"></a>PCD_Init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, mfrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PCD_Init &rArr; PCD_AntennaOn &rArr; PCD_ReadRegister &rArr; m_SPI_write
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_AntennaOn
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFRC522_init
</UL>

<P><STRONG><a name="[7c]"></a>MFRC522_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mfrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MFRC522_init &rArr; PCD_Init &rArr; PCD_AntennaOn &rArr; PCD_ReadRegister &rArr; m_SPI_write
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_SPI_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[146]"></a>PCD_WriteRegister_2</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, mfrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PCD_WriteRegister_2 &rArr; m_SPI_write
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_SPI_write
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_CommunicateWithPICC
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_CalculateCRC
</UL>

<P><STRONG><a name="[147]"></a>PCD_ReadRegister_2</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, mfrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PCD_ReadRegister_2 &rArr; m_SPI_write
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_SPI_write
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_CommunicateWithPICC
</UL>

<P><STRONG><a name="[148]"></a>PCD_SetRegisterBits</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mfrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PCD_SetRegisterBits &rArr; PCD_ReadRegister &rArr; m_SPI_write
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ReadRegister
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_CommunicateWithPICC
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_CalculateCRC
</UL>

<P><STRONG><a name="[149]"></a>PCD_ClrRegisterBits</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mfrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PCD_ClrRegisterBits &rArr; PCD_ReadRegister &rArr; m_SPI_write
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ReadRegister
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_StopCrypto1
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Select
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_REQA_or_WUPA
</UL>

<P><STRONG><a name="[14a]"></a>PCD_CalculateCRC</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, mfrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = PCD_CalculateCRC &rArr; PCD_SetRegisterBits &rArr; PCD_ReadRegister &rArr; m_SPI_write
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SetRegisterBits
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteRegister_2
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ReadRegister
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_MIFARE_Transceive
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE_Read
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_HaltA
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Select
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_CommunicateWithPICC
</UL>

<P><STRONG><a name="[14b]"></a>PCD_Reset</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mfrc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ReadRegister
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteRegister
</UL>

<P><STRONG><a name="[14c]"></a>PCD_CommunicateWithPICC</STRONG> (Thumb, 346 bytes, Stack size 72 bytes, mfrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = PCD_CommunicateWithPICC &rArr; PCD_CalculateCRC &rArr; PCD_SetRegisterBits &rArr; PCD_ReadRegister &rArr; m_SPI_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_CalculateCRC
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SetRegisterBits
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ReadRegister_2
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteRegister_2
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ReadRegister
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_MIFARE_Transceive
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_Authenticate
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_TransceiveData
</UL>

<P><STRONG><a name="[14d]"></a>PCD_TransceiveData</STRONG> (Thumb, 48 bytes, Stack size 56 bytes, mfrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = PCD_TransceiveData &rArr; PCD_CommunicateWithPICC &rArr; PCD_CalculateCRC &rArr; PCD_SetRegisterBits &rArr; PCD_ReadRegister &rArr; m_SPI_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_CommunicateWithPICC
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE_Read
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_HaltA
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Select
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_REQA_or_WUPA
</UL>

<P><STRONG><a name="[14e]"></a>PICC_REQA_or_WUPA</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, mfrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = PICC_REQA_or_WUPA &rArr; PCD_TransceiveData &rArr; PCD_CommunicateWithPICC &rArr; PCD_CalculateCRC &rArr; PCD_SetRegisterBits &rArr; PCD_ReadRegister &rArr; m_SPI_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_TransceiveData
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ClrRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_WakeupA
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_RequestA
</UL>

<P><STRONG><a name="[14f]"></a>PICC_RequestA</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mfrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = PICC_RequestA &rArr; PICC_REQA_or_WUPA &rArr; PCD_TransceiveData &rArr; PCD_CommunicateWithPICC &rArr; PCD_CalculateCRC &rArr; PCD_SetRegisterBits &rArr; PCD_ReadRegister &rArr; m_SPI_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_REQA_or_WUPA
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_IsNewCardPresent
</UL>

<P><STRONG><a name="[150]"></a>PICC_WakeupA</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mfrc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_REQA_or_WUPA
</UL>

<P><STRONG><a name="[151]"></a>PICC_Select</STRONG> (Thumb, 822 bytes, Stack size 104 bytes, mfrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = PICC_Select &rArr; PCD_TransceiveData &rArr; PCD_CommunicateWithPICC &rArr; PCD_CalculateCRC &rArr; PCD_SetRegisterBits &rArr; PCD_ReadRegister &rArr; m_SPI_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_TransceiveData
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_CalculateCRC
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ClrRegisterBits
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ReadRegister
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_ReadCardSerial
</UL>

<P><STRONG><a name="[152]"></a>PICC_HaltA</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, mfrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = PICC_HaltA &rArr; PCD_TransceiveData &rArr; PCD_CommunicateWithPICC &rArr; PCD_CalculateCRC &rArr; PCD_SetRegisterBits &rArr; PCD_ReadRegister &rArr; m_SPI_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_TransceiveData
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_CalculateCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRFID
</UL>

<P><STRONG><a name="[153]"></a>PCD_Authenticate</STRONG> (Thumb, 102 bytes, Stack size 64 bytes, mfrc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_CommunicateWithPICC
</UL>

<P><STRONG><a name="[154]"></a>PCD_StopCrypto1</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mfrc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ClrRegisterBits
</UL>

<P><STRONG><a name="[155]"></a>MIFARE_Read</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, mfrc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_TransceiveData
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_CalculateCRC
</UL>

<P><STRONG><a name="[156]"></a>PCD_MIFARE_Transceive</STRONG> (Thumb, 156 bytes, Stack size 72 bytes, mfrc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_CommunicateWithPICC
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_CalculateCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE_Transfer
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE_TwoStepHelper
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE_UltralightWrite
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE_Write
</UL>

<P><STRONG><a name="[157]"></a>MIFARE_Write</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, mfrc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_MIFARE_Transceive
</UL>

<P><STRONG><a name="[158]"></a>MIFARE_UltralightWrite</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, mfrc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_MIFARE_Transceive
</UL>

<P><STRONG><a name="[159]"></a>MIFARE_TwoStepHelper</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, mfrc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_MIFARE_Transceive
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE_Restore
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE_Increment
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE_Decrement
</UL>

<P><STRONG><a name="[15a]"></a>MIFARE_Decrement</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mfrc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE_TwoStepHelper
</UL>

<P><STRONG><a name="[15b]"></a>MIFARE_Increment</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mfrc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE_TwoStepHelper
</UL>

<P><STRONG><a name="[15c]"></a>MIFARE_Restore</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mfrc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE_TwoStepHelper
</UL>

<P><STRONG><a name="[15d]"></a>MIFARE_Transfer</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mfrc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_MIFARE_Transceive
</UL>

<P><STRONG><a name="[26a]"></a>PICC_GetType</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, mfrc522.o(.text), UNUSED)

<P><STRONG><a name="[26b]"></a>PICC_GetTypeName</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mfrc522.o(.text), UNUSED)

<P><STRONG><a name="[26c]"></a>GetStatusCodeName</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mfrc522.o(.text), UNUSED)

<P><STRONG><a name="[26d]"></a>MIFARE_SetAccessBits</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, mfrc522.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>PICC_IsNewCardPresent</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mfrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = PICC_IsNewCardPresent &rArr; PICC_RequestA &rArr; PICC_REQA_or_WUPA &rArr; PCD_TransceiveData &rArr; PCD_CommunicateWithPICC &rArr; PCD_CalculateCRC &rArr; PCD_SetRegisterBits &rArr; PCD_ReadRegister &rArr; m_SPI_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_RequestA
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRFID
</UL>

<P><STRONG><a name="[15f]"></a>PICC_ReadCardSerial</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mfrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = PICC_ReadCardSerial &rArr; PICC_Select &rArr; PCD_TransceiveData &rArr; PCD_CommunicateWithPICC &rArr; PCD_CalculateCRC &rArr; PCD_SetRegisterBits &rArr; PCD_ReadRegister &rArr; m_SPI_write
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRFID
</UL>

<P><STRONG><a name="[160]"></a>m_SPI_frequency</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rfid.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_SPI_write
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_SPI_init
</UL>

<P><STRONG><a name="[145]"></a>m_SPI_init</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, rfid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_SPI_init
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_SPI_frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFRC522_init
</UL>

<P><STRONG><a name="[140]"></a>m_SPI_write</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, rfid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = m_SPI_write
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_SPI_frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ReadRegister_2
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteRegister_2
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ReadRegister
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteRegister
</UL>

<P><STRONG><a name="[144]"></a>wait_ms</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rfid.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_Reset
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_Init
</UL>

<P><STRONG><a name="[11c]"></a>readRFID</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rfid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = readRFID &rArr; PICC_ReadCardSerial &rArr; PICC_Select &rArr; PCD_TransceiveData &rArr; PCD_CommunicateWithPICC &rArr; PCD_CalculateCRC &rArr; PCD_SetRegisterBits &rArr; PCD_ReadRegister &rArr; m_SPI_write
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_ReadCardSerial
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_IsNewCardPresent
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_HaltA
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenStateMachine
</UL>

<P><STRONG><a name="[84]"></a>__2fprintf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2fprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdRegisterCard
</UL>

<P><STRONG><a name="[105]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pantalla_distancia_2
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pantalla_distancia_1
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pantalla_ventilador
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pantalla_sensores
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pantalla_tempe
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pantalla_password
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenMainUpdate
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenTarjeta
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenMain
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenStateMachine
</UL>

<P><STRONG><a name="[164]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[165]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[163]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[5a]"></a>_printf_int_dec</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[5c]"></a>_printf_int_hex</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[26e]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>__printf</STRONG> (Thumb, 390 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[10b]"></a>__0fscanf</STRONG> (Thumb, 24 bytes, Stack size 56 bytes, __0fscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __0fscanf &rArr; __vfscanf_char_file &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taz_o_NO_taz
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenData
</UL>

<P><STRONG><a name="[16b]"></a>_scanf_int</STRONG> (Thumb, 336 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[197]"></a>_scanf_string</STRONG> (Thumb, 218 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[16d]"></a>freopen</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[83]"></a>fopen</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdRegisterCard
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taz_o_NO_taz
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenData
</UL>

<P><STRONG><a name="[16e]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[85]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fclose
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdRegisterCard
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taz_o_NO_taz
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenData
</UL>

<P><STRONG><a name="[102]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;squareButton
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_crc32
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_lfn_entry
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetASCIICode
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_MIFARE_Transceive
</UL>

<P><STRONG><a name="[173]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[26f]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[174]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_last_entry
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dot_entries
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_last_entry
</UL>

<P><STRONG><a name="[270]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[271]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[272]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_main
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fsinfo
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dot_entries
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
</UL>

<P><STRONG><a name="[175]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[273]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Ads7846
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_find_iob
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[274]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[275]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[f2]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_main
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenStateMachine
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_dir_empty
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[170]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[172]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[166]"></a>_printf_int_common</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[276]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[17f]"></a>_printf_fp_dec_real</STRONG> (Thumb, 628 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[162]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[3d]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[182]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[5e]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[183]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[161]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>

<P><STRONG><a name="[16c]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[16a]"></a>__vfscanf_char_file</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, scanf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf_char_file &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0fscanf
</UL>

<P><STRONG><a name="[16f]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _fseek &rArr; _sys_flen &rArr; __sys_flen
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>

<P><STRONG><a name="[277]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[188]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[189]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[171]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
</UL>

<P><STRONG><a name="[18a]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[177]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[62]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[c]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[18c]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[60]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[18e]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[6]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[181]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[185]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char_file
</UL>

<P><STRONG><a name="[17a]"></a>_btod_etento</STRONG> (Thumb, 222 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[9]"></a>___backspace$unlocked</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, backspace.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>__backspace</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, backspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __backspace
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ungetc_internal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char_file.o(.text)
</UL>
<P><STRONG><a name="[184]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[187]"></a>_ftell_internal</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[278]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>_initio</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = _initio &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[69]"></a>_terminateio</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[279]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[27a]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[191]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>

<P><STRONG><a name="[27b]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[27c]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[18b]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[43]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[18f]"></a>__vfscanf</STRONG> (Thumb, 876 bytes, Stack size 96 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[198]"></a>_readbuf</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, filbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[19b]"></a>_seteof</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, filbuf.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[199]"></a>__filbuf</STRONG> (Thumb, 482 bytes, Stack size 32 bytes, filbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seteof
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[201]"></a>__filbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, filbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __filbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[27d]"></a>__filbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, filbuf.o(.text), UNUSED)

<P><STRONG><a name="[19c]"></a>__flsbuf</STRONG> (Thumb, 478 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[205]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[27e]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>setvbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setvbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[190]"></a>_ungetc_internal</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, ungetc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__backspace
</UL>

<P><STRONG><a name="[27f]"></a>ungetc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ungetc.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[192]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[18d]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[196]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[19a]"></a>_flushlinebuffered</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, flushlinebuffered.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[19f]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[19e]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[1a0]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[1a1]"></a>_do_fflush</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fflush.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
</UL>

<P><STRONG><a name="[1a3]"></a>fflush</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fflush.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>

<P><STRONG><a name="[1a2]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>

<P><STRONG><a name="[17b]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1a6]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[1a5]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[1a7]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[1a8]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[17c]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[17d]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1a9]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[180]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[f5]"></a>__sys_close</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, fs_sys.o(i.__sys_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __sys_close &rArr; fat_wclose &rArr; fat_seek &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_wclose
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_wclose
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
</UL>

<P><STRONG><a name="[fd]"></a>__sys_ensure</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, fs_sys.o(i.__sys_ensure), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_ensure
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_ensure
</UL>

<P><STRONG><a name="[ff]"></a>__sys_flen</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, fs_sys.o(i.__sys_flen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sys_flen
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_fsize
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
</UL>

<P><STRONG><a name="[f3]"></a>__sys_open</STRONG> (Thumb, 442 bytes, Stack size 32 bytes, fs_sys.o(i.__sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_find
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_fsize
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_delete
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_create
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_map_drive
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_find_iob
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_dir
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_path_valid
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_create
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[f9]"></a>__sys_read</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, fs_sys.o(i.__sys_read), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_read
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
</UL>

<P><STRONG><a name="[fb]"></a>__sys_seek</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, fs_sys.o(i.__sys_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __sys_seek &rArr; fat_seek &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_seek
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
</UL>

<P><STRONG><a name="[f7]"></a>__sys_write</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, fs_sys.o(i.__sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_write
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[168]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[1b3]"></a>fat_create</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, fs_fat.o(i.fat_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = fat_create &rArr; fat_find_dir &rArr; create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_chk_media
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_root_clus
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_elink_path
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_entry
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[1b4]"></a>fat_delete</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, fs_fat.o(i.fat_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = fat_delete &rArr; fat_find_dir &rArr; create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_chk_media
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fsinfo
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus_chain
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_root_clus
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_elink_path
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_elink_dat
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_name
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_fn_elink
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_entries
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_dir_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[1b2]"></a>fat_find</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, fs_fat.o(i.fat_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = fat_find &rArr; fat_find_dir &rArr; create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_chk_media
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_root_clus
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_elink_path
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_elink_dat
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_name
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_fn_elink
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[1f4]"></a>fat_init</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, fs_fat.o(i.fat_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fat_init &rArr; write_fsinfo &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_flush
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_find_drv
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fsinfo
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fsinfo
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bootrec
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_free_clus
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv
</UL>

<P><STRONG><a name="[1b1]"></a>fat_path_valid</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, fs_fat.o(i.fat_path_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fat_path_valid &rArr; get_dir_name
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;val_ch
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dir_name
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[1b8]"></a>fat_read</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, fs_fat.o(i.fat_read), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_chk_media
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
</UL>

<P><STRONG><a name="[1ba]"></a>fat_seek</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, fs_fat.o(i.fat_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fat_seek &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_chk_media
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_EOC
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_wclose
</UL>

<P><STRONG><a name="[1aa]"></a>fat_wclose</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, fs_fat.o(i.fat_wclose))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = fat_wclose &rArr; fat_seek &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_chk_media
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_last_entry
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fsinfo
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_last_entry
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_date
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_EOC
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
</UL>

<P><STRONG><a name="[1bc]"></a>fat_write</STRONG> (Thumb, 292 bytes, Stack size 56 bytes, fs_fat.o(i.fat_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = fat_write &rArr; write_fat_link &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_set
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_chk_media
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_clus
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
</UL>

<P><STRONG><a name="[11e]"></a>fdelete</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fs_mapi.o(i.fdelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = fdelete &rArr; fat_find &rArr; fat_find_dir &rArr; create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_find
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_delete
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_lock
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_map_drive
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_find_iob
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_dir
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenStateMachine
</UL>

<P><STRONG><a name="[40]"></a>fgetc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fgetc.o(i.fgetc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fgetc &rArr; __filbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char_file.o(.text)
</UL>
<P><STRONG><a name="[81]"></a>finit</STRONG> (Thumb, 110 bytes, Stack size 56 bytes, fs_mapi.o(i.finit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = finit &rArr; init_drv &rArr; fat_init &rArr; write_fsinfo &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_cfg_drv
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_map_drive
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdInit
</UL>

<P><STRONG><a name="[3f]"></a>fputc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[203]"></a>fs_cfg_drv</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, fs_mapi.o(i.fs_cfg_drv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fs_cfg_drv
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_config
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
</UL>

<P><STRONG><a name="[1e9]"></a>fs_chk_media</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, fs_lib.o(i.fs_chk_media))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fs_chk_media
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_wclose
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_create
</UL>

<P><STRONG><a name="[1b0]"></a>fs_dir</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fs_lib.o(i.fs_dir))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[1f5]"></a>fs_find_drv</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fs_lib.o(i.fs_find_drv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fs_find_drv
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_elink_path
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
</UL>

<P><STRONG><a name="[1ae]"></a>fs_find_iob</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fs_lib.o(i.fs_find_iob))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fs_find_iob &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[208]"></a>fs_get_date</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_time.o(i.fs_get_date))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_date
</UL>

<P><STRONG><a name="[209]"></a>fs_get_time</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_time.o(i.fs_get_time))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
</UL>

<P><STRONG><a name="[200]"></a>fs_lock</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, fs_lib.o(i.fs_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
</UL>

<P><STRONG><a name="[1af]"></a>fs_map_drive</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, fs_lib.o(i.fs_map_drive))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fs_map_drive
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[f0]"></a>mmc_DevCtrl</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fs_mmc.o(i.mmc_DevCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mmc_DevCtrl &rArr; mmc_read_cid &rArr; mmc_read_info &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_cid
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_DevCtrl
</UL>

<P><STRONG><a name="[eb]"></a>mmc_Init</STRONG> (Thumb, 530 bytes, Stack size 56 bytes, fs_mmc.o(i.mmc_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mmc_Init &rArr; mmc_read_csd &rArr; mmc_read_info &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_csd
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_cid
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_command
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_Init
</UL>

<P><STRONG><a name="[ef]"></a>mmc_ReadInfo</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, fs_mmc.o(i.mmc_ReadInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mmc_ReadInfo &rArr; mmc_read_csd &rArr; mmc_read_info &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_csd
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_cid
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_RdInfo
</UL>

<P><STRONG><a name="[ed]"></a>mmc_ReadSector</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, fs_mmc.o(i.mmc_ReadSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mmc_ReadSector &rArr; mmc_read_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_block
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_command
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_RdSect
</UL>

<P><STRONG><a name="[ec]"></a>mmc_UnInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fs_mmc.o(i.mmc_UnInit))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_UnInit
</UL>

<P><STRONG><a name="[ee]"></a>mmc_WriteSector</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, fs_mmc.o(i.mmc_WriteSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mmc_WriteSector &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_write_block
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_WrSect
</UL>

<P><STRONG><a name="[65]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[44]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[136]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[213]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[e7]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocidad_ventilador
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDisplayPoint
</UL>

<P><STRONG><a name="[216]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[21b]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[e8]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocidad_ventilador
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDisplayPoint
</UL>

<P><STRONG><a name="[219]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[e3]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDisplayPoint
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCalibrationMatrix
</UL>

<P><STRONG><a name="[21a]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[13a]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[21c]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[e9]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocidad_ventilador
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDisplayPoint
</UL>

<P><STRONG><a name="[21d]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[e2]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocidad_ventilador
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCalibrationMatrix
</UL>

<P><STRONG><a name="[280]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[e5]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDisplayPoint
</UL>

<P><STRONG><a name="[281]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[e6]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocidad_ventilador
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDisplayPoint
</UL>

<P><STRONG><a name="[21e]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[215]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[218]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[282]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)

<P><STRONG><a name="[21f]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[12f]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pantalla_distancia_2
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pantalla_distancia_1
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pantalla_sensores
</UL>

<P><STRONG><a name="[221]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[225]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[137]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[223]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[283]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)

<P><STRONG><a name="[224]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[228]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[139]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[226]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[222]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[214]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[138]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[227]"></a>_frcmple</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[58]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[89]"></a>GPIO_GetPointer</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lpc17xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_SetMask
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
</UL>

<P><STRONG><a name="[99]"></a>FIO_HalfWordGetPointer</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordReadValue
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordClearValue
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordSetValue
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordSetMask
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordSetDir
</UL>

<P><STRONG><a name="[9f]"></a>FIO_ByteGetPointer</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteReadValue
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteClearValue
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteSetValue
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteSetMask
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteSetDir
</UL>

<P><STRONG><a name="[a5]"></a>set_PinFunc</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, lpc17xx_pinsel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = set_PinFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
</UL>

<P><STRONG><a name="[a6]"></a>set_ResistorMode</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, lpc17xx_pinsel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = set_ResistorMode
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
</UL>

<P><STRONG><a name="[a7]"></a>set_OpenDrainMode</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, lpc17xx_pinsel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = set_OpenDrainMode
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
</UL>

<P><STRONG><a name="[bd]"></a>setSSPclock</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, lpc17xx_ssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = setSSPclock &rArr; CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetPCLK
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init
</UL>

<P><STRONG><a name="[ce]"></a>LCD_Configuration</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, glcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Initializtion
</UL>

<P><STRONG><a name="[cf]"></a>delay_ms</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, glcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Initializtion
</UL>

<P><STRONG><a name="[d1]"></a>LCD_BGR2RGB</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, glcd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPoint
</UL>

<P><STRONG><a name="[d9]"></a>DelayUS</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, touchpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPanel_Calibrate
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_GetAdXY
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Y
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_X
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RD_AD
</UL>

<P><STRONG><a name="[d7]"></a>WR_CMD</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, touchpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WR_CMD &rArr; SSP_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_GetStatus
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_ReceiveData
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Y
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_X
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RD_AD
</UL>

<P><STRONG><a name="[d8]"></a>RD_AD</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, touchpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RD_AD &rArr; WR_CMD &rArr; SSP_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WR_CMD
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Y
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_X
</UL>

<P><STRONG><a name="[45]"></a>mc0_Init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mc0_Init &rArr; mmc_Init &rArr; mmc_read_csd &rArr; mmc_read_info &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file_config.o(.constdata)
</UL>
<P><STRONG><a name="[46]"></a>mc0_UnInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_UnInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file_config.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>mc0_RdSect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mc0_RdSect &rArr; mmc_ReadSector &rArr; mmc_read_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_ReadSector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file_config.o(.constdata)
</UL>
<P><STRONG><a name="[48]"></a>mc0_WrSect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mc0_WrSect &rArr; mmc_WriteSector &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_WriteSector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file_config.o(.constdata)
</UL>
<P><STRONG><a name="[49]"></a>mc0_RdInfo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mc0_RdInfo &rArr; mmc_ReadInfo &rArr; mmc_read_csd &rArr; mmc_read_info &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_ReadInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file_config.o(.constdata)
</UL>
<P><STRONG><a name="[4a]"></a>mc0_DevCtrl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mc0_DevCtrl &rArr; mmc_DevCtrl &rArr; mmc_read_cid &rArr; mmc_read_info &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_DevCtrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file_config.o(.constdata)
</UL>
<P><STRONG><a name="[4c]"></a>UnInit</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, spi_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> spi_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>SendBuf</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, spi_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SendBuf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>RecBuf</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, spi_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RecBuf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[51]"></a>SetSS</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, spi_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> spi_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>CheckMedia</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, spi_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> spi_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[134]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tecladom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TIMER1
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tecladoM
</UL>

<P><STRONG><a name="[13c]"></a>uart0_set_baudrate</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = uart0_set_baudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
</UL>

<P><STRONG><a name="[204]"></a>init_drv</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, fs_mapi.o(i.init_drv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = init_drv &rArr; fat_init &rArr; write_fsinfo &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_jour_init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
</UL>

<P><STRONG><a name="[20d]"></a>mmc_command</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, fs_mmc.o(i.mmc_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mmc_command
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_ReadSector
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_Init
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_write_block
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_info
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_block
</UL>

<P><STRONG><a name="[212]"></a>mmc_fill_cid</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, fs_mmc.o(i.mmc_fill_cid))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_cid
</UL>

<P><STRONG><a name="[20f]"></a>mmc_read_block</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, fs_mmc.o(i.mmc_read_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mmc_read_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_command
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_ReadSector
</UL>

<P><STRONG><a name="[20c]"></a>mmc_read_cid</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, fs_mmc.o(i.mmc_read_cid))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mmc_read_cid &rArr; mmc_read_info &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_info
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_fill_cid
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_ReadInfo
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_DevCtrl
</UL>

<P><STRONG><a name="[20e]"></a>mmc_read_csd</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, fs_mmc.o(i.mmc_read_csd))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mmc_read_csd &rArr; mmc_read_info &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_info
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_ReadInfo
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_Init
</UL>

<P><STRONG><a name="[211]"></a>mmc_read_info</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, fs_mmc.o(i.mmc_read_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mmc_read_info &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_command
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_csd
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_cid
</UL>

<P><STRONG><a name="[210]"></a>mmc_write_block</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, fs_mmc.o(i.mmc_write_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_command
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_WriteSector
</UL>

<P><STRONG><a name="[1be]"></a>alloc_name</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, fs_fat.o(i.alloc_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = alloc_name &rArr; alloc_new_clus &rArr; write_fat_link &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_set
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_read
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_pos_set
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_pos_comp
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_lfn
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_new_clus
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_create
</UL>

<P><STRONG><a name="[1c4]"></a>alloc_new_clus</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fs_fat.o(i.alloc_new_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = alloc_new_clus &rArr; write_fat_link &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_clus
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_EOC
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
</UL>

<P><STRONG><a name="[1c9]"></a>cache_fat</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, fs_fat.o(i.cache_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsj_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus_chain
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_clus
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_free_clus
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_new_clus
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_wclose
</UL>

<P><STRONG><a name="[1bf]"></a>check_lfn</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, fs_fat.o(i.check_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = check_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;val_ch
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_entry
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
</UL>

<P><STRONG><a name="[1cc]"></a>check_name</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_fat.o(i.check_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_entry
</UL>

<P><STRONG><a name="[1ce]"></a>chk_dir_empty</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, fs_fat.o(i.chk_dir_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = chk_dir_empty &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_read
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_pos_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[1c5]"></a>clear_clus</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fs_fat.o(i.clear_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = clear_clus &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
</UL>

<P><STRONG><a name="[1cf]"></a>clus_to_sect</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fs_fat.o(i.clus_to_sect))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_last_entry
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dot_entries
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_last_entry
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_read
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_entries
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_lfn_entry
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
</UL>

<P><STRONG><a name="[1d1]"></a>count_free_clus</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, fs_fat.o(i.count_free_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = count_free_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_sect
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
</UL>

<P><STRONG><a name="[1d4]"></a>create_entry</STRONG> (Thumb, 252 bytes, Stack size 80 bytes, fs_fat.o(i.create_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_insert
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_prop
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_set
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_alloc
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_ent_hash
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_hash
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfn_calc_chksum
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nt_name
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_fn_elink
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvt_fatname
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_lfn_entry
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_name
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_create
</UL>

<P><STRONG><a name="[1d8]"></a>create_lfn_entry</STRONG> (Thumb, 262 bytes, Stack size 48 bytes, fs_fat.o(i.create_lfn_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = create_lfn_entry &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_read
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_pos_set
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_entry
</UL>

<P><STRONG><a name="[1da]"></a>create_sfn_entry</STRONG> (Thumb, 380 bytes, Stack size 40 bytes, fs_fat.o(i.create_sfn_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = create_sfn_entry &rArr; alloc_new_clus &rArr; write_fat_link &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_date
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_new_clus
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_entry
</UL>

<P><STRONG><a name="[1d6]"></a>cvt_fatname</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, fs_fat.o(i.cvt_fatname))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cvt_fatname &rArr; val_char
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;val_char
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_entry
</UL>

<P><STRONG><a name="[1e6]"></a>delete_entries</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, fs_fat.o(i.delete_entries))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = delete_entries &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_delete
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_set
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_read
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_pos_set
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[1e8]"></a>fat_crc32</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fs_fat.o(i.fat_crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fat_crc32 &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_ent_hash
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_hash
</UL>

<P><STRONG><a name="[1ec]"></a>fat_find_dir</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, fs_fat.o(i.fat_find_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = fat_find_dir &rArr; create_entry &rArr; check_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dot_entries
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_elink_dat
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dir_name
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_name
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_fn_elink
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_entry
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_create
</UL>

<P><STRONG><a name="[1d5]"></a>find_fn_elink</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fs_fat.o(i.find_fn_elink))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = find_fn_elink &rArr; name_hash &rArr; fat_crc32 &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_scan
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_entry
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[1ee]"></a>find_name</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_fat.o(i.find_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = find_name &rArr; search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[1c1]"></a>frec_pos_comp</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, fs_fat.o(i.frec_pos_comp))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
</UL>

<P><STRONG><a name="[1c3]"></a>frec_pos_set</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, fs_fat.o(i.frec_pos_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = frec_pos_set &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_EOC
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_entries
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_lfn_entry
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_dir_empty
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
</UL>

<P><STRONG><a name="[1c2]"></a>frec_read</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, fs_fat.o(i.frec_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = frec_read &rArr; read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_elink_dat
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_entries
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_lfn_entry
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_dir_empty
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
</UL>

<P><STRONG><a name="[1c7]"></a>get_EOC</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fs_fat.o(i.get_EOC))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_new_clus
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_wclose
</UL>

<P><STRONG><a name="[1f8]"></a>get_bootrec</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, fs_fat.o(i.get_bootrec))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_bootrec &rArr; read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
</UL>

<P><STRONG><a name="[1e2]"></a>get_date</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, fs_fat.o(i.get_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_date
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_date
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dot_entries
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_wclose
</UL>

<P><STRONG><a name="[1f3]"></a>get_dir_name</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, fs_fat.o(i.get_dir_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_dir_name
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_path_valid
</UL>

<P><STRONG><a name="[1ed]"></a>get_elink_dat</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, fs_fat.o(i.get_elink_dat))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = get_elink_dat &rArr; frec_read &rArr; read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[1d2]"></a>get_fat_sect</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, fs_fat.o(i.get_fat_sect))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus_chain
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_clus
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_free_clus
</UL>

<P><STRONG><a name="[1c6]"></a>get_free_clus</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, fs_fat.o(i.get_free_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_free_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_sect
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_new_clus
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
</UL>

<P><STRONG><a name="[1f9]"></a>get_fsinfo</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, fs_fat.o(i.get_fsinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_fsinfo &rArr; read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
</UL>

<P><STRONG><a name="[1d9]"></a>get_nt_name</STRONG> (Thumb, 390 bytes, Stack size 40 bytes, fs_fat.o(i.get_nt_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_nt_name &rArr; val_char
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;val_char
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_entry
</UL>

<P><STRONG><a name="[1e4]"></a>get_time</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, fs_fat.o(i.get_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dot_entries
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_wclose
</UL>

<P><STRONG><a name="[1d3]"></a>get_u16</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fs_fat.o(i.get_u16))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus_chain
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_clus
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_elink_dat
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bootrec
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_free_clus
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
</UL>

<P><STRONG><a name="[1f7]"></a>get_u32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fs_fat.o(i.get_u32))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus_chain
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fsinfo
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_clus
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_elink_dat
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bootrec
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
</UL>

<P><STRONG><a name="[1eb]"></a>init_elink_path</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fs_fat.o(i.init_elink_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_elink_path &rArr; fs_find_drv
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_init_path
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_find_drv
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_create
</UL>

<P><STRONG><a name="[1fc]"></a>is_EOC</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, fs_fat.o(i.is_EOC))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus_chain
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_pos_set
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
</UL>

<P><STRONG><a name="[1d7]"></a>lfn_calc_chksum</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fs_fat.o(i.lfn_calc_chksum))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_entry
</UL>

<P><STRONG><a name="[1dc]"></a>name_hash</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fs_fat.o(i.name_hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = name_hash &rArr; fat_crc32 &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_fn_elink
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_entry
</UL>

<P><STRONG><a name="[1fa]"></a>read_cache</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fs_fat.o(i.read_cache), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
</UL>

<P><STRONG><a name="[1fd]"></a>read_last_entry</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fs_fat.o(i.read_last_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = read_last_entry &rArr; read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_wclose
</UL>

<P><STRONG><a name="[1e1]"></a>read_sector</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, fs_fat.o(i.read_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_last_entry
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_last_entry
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fsinfo
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bootrec
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_read
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
</UL>

<P><STRONG><a name="[1cd]"></a>search_for_name</STRONG> (Thumb, 688 bytes, Stack size 168 bytes, fs_fat.o(i.search_for_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = search_for_name &rArr; frec_pos_set &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_insert
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_prop
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_set
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_alloc
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_ent_hash
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfn_calc_chksum
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_read
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_pos_set
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_pos_comp
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_crc32
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvt_fatname
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_name
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_name
</UL>

<P><STRONG><a name="[1fb]"></a>set_next_clus</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, fs_fat.o(i.set_next_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_sect
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_pos_set
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
</UL>

<P><STRONG><a name="[1ea]"></a>set_root_clus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fs_fat.o(i.set_root_clus))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_create
</UL>

<P><STRONG><a name="[1e3]"></a>set_u16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fs_fat.o(i.set_u16))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fsinfo
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dot_entries
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus_chain
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_wclose
</UL>

<P><STRONG><a name="[1fe]"></a>set_u32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fs_fat.o(i.set_u32))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fsinfo
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_wclose
</UL>

<P><STRONG><a name="[1dd]"></a>short_ent_hash</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, fs_fat.o(i.short_ent_hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = short_ent_hash &rArr; fat_crc32 &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_entry
</UL>

<P><STRONG><a name="[1ef]"></a>unlink_clus_chain</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, fs_fat.o(i.unlink_clus_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = unlink_clus_chain &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_EOC
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_sect
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[1cb]"></a>val_ch</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, fs_fat.o(i.val_ch))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;val_char
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_lfn
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_path_valid
</UL>

<P><STRONG><a name="[1e5]"></a>val_char</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fs_fat.o(i.val_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = val_char
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;val_ch
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nt_name
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvt_fatname
</UL>

<P><STRONG><a name="[1d0]"></a>write_cache</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, fs_fat.o(i.write_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fsinfo
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_wclose
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[1f1]"></a>write_dot_entries</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, fs_fat.o(i.write_dot_entries))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = write_dot_entries &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_date
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
</UL>

<P><STRONG><a name="[1c8]"></a>write_fat_link</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, fs_fat.o(i.write_fat_link))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = write_fat_link &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_sect
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_new_clus
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_wclose
</UL>

<P><STRONG><a name="[1f0]"></a>write_fsinfo</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, fs_fat.o(i.write_fsinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = write_fsinfo &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_wclose
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[1ff]"></a>write_last_entry</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fs_fat.o(i.write_last_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = write_last_entry &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_wclose
</UL>

<P><STRONG><a name="[1e0]"></a>write_sector</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fs_fat.o(i.write_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsj_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_last_entry
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dot_entries
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_entries
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_lfn_entry
</UL>

<P><STRONG><a name="[220]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[217]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[179]"></a>_fp_digits</STRONG> (Thumb, 426 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[3e]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[42]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
